@page
@model CustomerSalesSystem.Web.Pages.Sales.IndexModel
@inject CustomerService _customerService;
@{
    ViewData["Title"] = "Sales";
}
@{
    var customers = await _customerService.GetAllAsync(1, 50);
    IList<CustomerDto> Customers = customers.Items;
}
<h2 class="mb-4">Sales List</h2>

<a class="btn btn-primary mb-3" asp-page="@PageNavigation.CreateSale">Create New Sale</a>

<form method="get" id="salesFilter" class="row g-3 align-items-end">
    <div class="col-md-4">
        <div class="row g-3 align-items-center">
            <div class="col-8">
                <label for="customerId" class="form-label">Customer</label>
                <select class="form-select" id="customerId" asp-items="Customers.Select(x=> new SelectListItem{Text=x.Name,Value=x.Id.ToString()})" style="min-width: 200px;">
                    <option value="">Select customer</option>
                </select>
            </div>

            <div class="col-4">
                <label for="pageSize" class="form-label">Page Size</label>
                <select class="form-select" id="pageSize" style="width: 100px;">
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
    </div>
   

    <div class="col-md-4">
        <label for="saleDate" class="form-label">Date:</label>
        <input type="date" id="saleDate" class="form-control" />
    </div>
    <div class="col-md-4">
        <button type="submit" class="btn btn-success ms-2">Filter</button>
        <button type="reset" id="clearButton"  class="btn btn-outline-secondary">
            <i class="bi bi-x-circle"></i> Clear
        </button>
    </div>
   

</form>

<hr class="my-4" />

<table class="table table-bordered table-striped">
    <thead class="table-dark">
        <tr>
            <th>Customer</th>
            <th>Product</th>
            <th>Quantity</th>
            <th>Total</th>
            <th>Date</th>
        </tr>
    </thead>
    <tbody id="salesTableBody">
        <!-- Rows will be populated via JS -->
    </tbody>
</table>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        let isFiltering = false;

        // ✅ Load all sales
        async function loadSales() {
            const res = await axios.get(`/Sales/Index?handler=Sales`);
            renderSales(res.data);
        }

        // ✅ Filter sales
        document.getElementById("salesFilter").addEventListener("submit", async function (e) {
            e.preventDefault();
            isFiltering = true;

            const customerId = document.getElementById("customerId").value;
            const date = document.getElementById("saleDate").value;

            const res = await axios.get(`/Sales/Index?handler=FilterSales`, {
                params: { customerId: customerId || null, date: date || null }
            });

            renderSales(res.data);
        });

        // ✅ Render table
        function renderSales(sales) {
            const tbody = document.getElementById("salesTableBody");
            tbody.innerHTML = "";

            if (!sales || sales.length === 0) {
                const row = document.createElement("tr");
                row.innerHTML = `<td colspan="5" class="text-center text-danger">No sales found.</td>`;
                tbody.appendChild(row);
                return;
            }

            sales.forEach(s => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${s.customerName}</td>
                    <td>${s.productName}</td>
                    <td>${s.quantity}</td>
                    <td>${s.totalPrice}</td>
                    <td>${s.saleDate?.split('T')[0]}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // ✅ Clear button reloads all sales
        document.getElementById("clearButton").addEventListener("click", async function () {
            isFiltering = false;
            await loadSales();
        });
    
        // Initial load
        if (!isFiltering) {
            loadSales();
        }
    </script>
}
